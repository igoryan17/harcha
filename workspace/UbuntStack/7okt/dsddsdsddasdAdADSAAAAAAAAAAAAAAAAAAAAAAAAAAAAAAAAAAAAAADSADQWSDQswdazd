FTOK(3)                    Linux Programmer's Manual                   FTOK(3)



NNAAMMEE
       ftok  -  convert  a pathname and a project identifier to a System V IPC
       key

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssyyss//ttyyppeess..hh>>
       ##iinncclluuddee <<ssyyss//iippcc..hh>>

       kkeeyy__tt ffttookk((ccoonnsstt cchhaarr **_p_a_t_h_n_a_m_e,, iinntt _p_r_o_j___i_d));;

DDEESSCCRRIIPPTTIIOONN
       The ffttookk() function uses the identity of the file named  by  the  given
       _p_a_t_h_n_a_m_e  (which  must  refer  to an existing, accessible file) and the
       least significant 8 bits of _p_r_o_j___i_d (which must be nonzero) to generate
       a  _k_e_y___t  type  System  V  IPC  key,  suitable  for use with mmssggggeett(2),
       sseemmggeett(2), or sshhmmggeett(2).

       The resulting value is the same for all pathnames that  name  the  same
       file,  when  the  same  value  of  _p_r_o_j___i_d is used.  The value returned
       should be different when the (simultaneously  existing)  files  or  the
       project IDs differ.

RREETTUURRNN VVAALLUUEE
       On  success,  the  generated _k_e_y___t value is returned.  On failure -1 is
       returned, with _e_r_r_n_o indicating the error as  for  the  ssttaatt(2)  system
       call.

CCOONNFFOORRMMIINNGG TTOO
       POSIX.1-2001.

NNOOTTEESS
       Under libc4 and libc5 (and under SunOS 4.x) the prototype was:

              kkeeyy__tt ffttookk((cchhaarr **_p_a_t_h_n_a_m_e,, cchhaarr _p_r_o_j___i_d));;

       Today _p_r_o_j___i_d is an _i_n_t, but still only 8 bits are used.  Typical usage
       has an ASCII character _p_r_o_j___i_d, that is why the behavior is said to  be
       undefined when _p_r_o_j___i_d is zero.

       Of course no guarantee can be given that the resulting _k_e_y___t is unique.
       Typically, a best effort attempt combines the given _p_r_o_j___i_d  byte,  the
       lower  16  bits of the inode number, and the lower 8 bits of the device
       number into a 32-bit result.  Collisions may easily happen, for example
       between files on _/_d_e_v_/_h_d_a_1 and files on _/_d_e_v_/_s_d_a_1.

SSEEEE AALLSSOO
       mmssggggeett(2), sseemmggeett(2), sshhmmggeett(2), ssttaatt(2), ssvviippcc(7)

CCOOLLOOPPHHOONN
       This  page  is  part of release 3.54 of the Linux _m_a_n_-_p_a_g_e_s project.  A
       description of the project, and information about reporting  bugs,  can
       be found at http://www.kernel.org/doc/man-pages/.



GNU                               2001-11-28                           FTOK(3)
